# - Config file for the C++QED package
# It defines the following variables
#  C++QED_INCLUDE_DIRS - include directories for C++QED
#  C++QED_LIBRARIES    - libraries to link against
#  C++QED_EXECUTABLE   - the bar executable
#  C++QED_HAS_SERIALIZATION - serialization support enabled
#  C++QED_HAS_FLENS    - FLENS support enabled

# Compute paths
get_filename_component(C++QED_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${C++QED_CMAKE_DIR}")

set(C++QED_HAS_SERIALIZATION @ENABLE_SERIALIZATION@)
set(C++QED_HAS_FLENS @ENABLE_FLENS@)

if(C++QED_HAS_SERIALIZATION)
  find_package(Boost REQUIRED serialization)
else()
  find_package(Boost REQUIRED)
  set(C++QED_DEFINITIOINS ${C++QED_DEFINITIOINS} "-DDO_NOT_USE_BOOST_SERIALIZATION")
endif()
set(C++QED_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})

if(C++QED_HAS_FLENS)
  find_package(flens REQUIRED)
else()
  set(C++QED_DEFINITIOINS ${C++QED_DEFINITIOINS} "-DDO_NOT_USE_FLENS")
endif()
set(C++QED_INCLUDE_DIRS ${flens_INCLUDE_DIRS})

if(EXISTS "${C++QED_CMAKE_DIR}/CMakeCache.txt")
   # In build tree
   include("${C++QED_CMAKE_DIR}/C++QEDBuildTreeSettings.cmake")
else()
  foreach(d @CONF_REL_INCLUDE_DIRS@)
    get_filename_component(NEW_INCLUDE_DIR ${C++QED_CMAKE_DIR}/${d} ABSOLUTE)
    set(C++QED_INCLUDE_DIRS ${C++QED_INCLUDE_DIRS} ${NEW_INCLUDE_DIR})
  endforeach(d)
endif()
 
# Our library dependencies (contains definitions for IMPORTED targets)
include("${C++QED_CMAKE_DIR}/C++QEDLibraryDepends.cmake")
 
# These are IMPORTED targets created by C++QEDLibraryDepends.cmake
set(C++QED_LIBRARIES el C++QED utils)
