# - Config file for the CPPQED package
# It defines the following variables
#  CPPQED_INCLUDE_DIRS - include directories for CPPQED
#  CPPQED_THIRDPARTY_INCLUDE_DIRS - include directories for CPPQED
#  CPPQED_LIBRARIES    - libraries to link against
#  CPPQED_DEFINITIONS  - compiler macro definitions needed together with CPPQED
#  CPPQED_HAS_SERIALIZATION - serialization support enabled
#  CPPQED_HAS_FLENS    - FLENS support enabled

# Compute paths
get_filename_component(CPPQED_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(CPPQED_PREFIX_DIR ${CPPQED_CMAKE_DIR}/../../../ ABSOLUTE) # get the chosen install prefix
if(EXISTS "${CPPQED_CMAKE_DIR}/CMakeCache.txt")
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CPPQED_CMAKE_DIR}/../cmake/Modules)
else()
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CPPQED_CMAKE_DIR}")
endif()

include(LibFindMacros)

set(CPPQED_HAS_SERIALIZATION @ENABLE_SERIALIZATION@)
set(CPPQED_HAS_FLENS @ENABLE_FLENS@)

if(EXISTS "${CPPQED_CMAKE_DIR}/CMakeCache.txt")
   # In build tree
   include("${CPPQED_CMAKE_DIR}/CPPQEDBuildTreeSettings.cmake")
else()
  foreach(d @CONF_REL_INCLUDE_DIRS@)
    get_filename_component(NEW_INCLUDE_DIR ${CPPQED_CMAKE_DIR}/${d} ABSOLUTE)
    set(CPPQED_INCLUDE_DIRS ${CPPQED_INCLUDE_DIRS} ${NEW_INCLUDE_DIR})
  endforeach(d)
endif()

set(CPPQED_THIRDPARTY_INCLUDE_DIRS ${CPPQED_THIRDPARTY_INCLUDE_DIRS} @THIRDPARTY_INCLUDE_DIRS@)

set(CPPQED_DEFINITIONS ${CPPQED_DEFINITIONS} @CPPQED_DEFINITIONS@)

set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DBZ_DEBUG")

# Our library dependencies (contains definitions for IMPORTED targets)
include("${CPPQED_CMAKE_DIR}/CPPQEDLibraryDepends.cmake")
set(CPPQED_LIBRARIES @CPPQEDLIB@)

 

