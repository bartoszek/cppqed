#! \addtogroup CMake
#!  @{

#! \defgroup Config CMake config files
#! \brief CMake config files export targets and variables so that other projects can use them.

#! @}

#! \defgroup CPPQEDConfig
#! \ingroup Config
#! \brief Export targets and variables for the core component.

#! \addtogroup CPPQEDConfig
#! @{

#! \file
#! \brief Export targets and variables for the core component.

# - Config file for the CPPQED package
# It defines the following variables
#  CPPQED_INCLUDE_DIRS - include directories for CPPQED
#  CPPQED_THIRDPARTY_INCLUDE_DIRS - include directories for CPPQED
#  CPPQED_LIBRARIES    - libraries to link against
#  CPPQED_DEFINITIONS  - compiler macro definitions needed together with CPPQED
#  CPPQED_HAS_SERIALIZATION - serialization support enabled
#  CPPQED_HAS_FLENS    - FLENS support enabled
#  CPPQED_CORE_GIT     - Core git commit sha1
#  CPPQED_USE          - CMAKE related stuff to use this package
#  CPPQED_DOXYGEN_DIR  - Doxygen directory
#  CPPQED_DOXYGEN_TAG  - Doxygen tagfile

@PACKAGE_INIT@

#! \brief
set(CPPQED_MAJOR_VERSION "@CPPQED_MAJOR_VERSION@")
set(CPPQED_MINOR_VERSION @CPPQED_MINOR_VERSION@)
set(CPPQED_PATCH_VERSION @CPPQED_PATCH_VERSION@)
set(CPPQED_VERSION @CPPQED_VERSION@)
set(CPPQED_ID @CPPQED_ID@)
set(CPPQED_HASH @HASH@)
set(CPPQED_ABI_MAJOR @CPPQED_ABI_MAJOR@)
set(CPPQED_ABI_MINOR @CPPQED_ABI_MINOR@)
set(CPPQED_ABI_MICRO @CPPQED_ABI_MICRO@)


#! Indicates whether C++QED is compiled with boost serialization support
set(CPPQED_HAS_SERIALIZATION "@CPPQED_HAS_SERIALIZATION@")
#! Indicates whether FLENS support is compiled in.
set(CPPQED_HAS_FLENS "@CPPQED_HAS_FLENS@")

#! Core git commit sha1 hash value
set(CPPQED_CORE_GIT "@CONF_GIT_SHA1@")

# set_and_check does not work with lists

#! A list of all C++QED core subdirectories which contain header files
set(CPPQED_INCLUDE_DIRS "@PACKAGE_CONF_INCLUDE_DIRS@")

#! \brief A list of all directories with header files C++QED depends on (even at compile time of other
#!   clients because of templates)
set(CPPQED_THIRDPARTY_INCLUDE_DIRS "@PACKAGE_CPPQED_THIRDPARTY_INCLUDE_DIRS@")

set(CPPQED_DEFINITIONS @CPPQED_DEFINITIONS@)
if(@CONF_FLAT_INCLUDE@)
  set(CPPQED_DEFINITIONS ${CPPQED_DEFINITIONS} "-DFLAT_INCLUDE")
endif(@CONF_FLAT_INCLUDE@)


set_and_check(CPPQED_CMAKE_DIR @PACKAGE_CONF_CMAKE_DIR@)
set_and_check(CPPQED_USE @PACKAGE_CONF_CMAKE_DIR@/CPPQEDUse.cmake)

set(CPPQED_DOXYGEN_DIR @PACKAGE_CONF_DOC_DIR@)
set(CPPQED_DOXYGEN_TAG @PACKAGE_CONF_DOC_DIR@/@PROJECT_NAME@.tag)

# Our library dependencies (contains definitions for IMPORTED targets)
if(NOT TARGET @CPPQEDLIB@)
  include("@PACKAGE_CONF_CMAKE_DIR@/CPPQEDcoreTargets.cmake")
endif()

# This is an IMPORTED target created by CPPQEDcoreTargets.cmake
set(CPPQED_LIBRARIES @CPPQEDLIB@)
set_target_properties(@CPPQEDLIB@ PROPERTIES MAP_IMPORTED_CONFIG_DEBUG "Debug" MAP_IMPORTED_CONFIG_RELEASE "Release")

#! @}
